package com.oryx.core.layout.component.grid;

import com.oryx.core.bundle.IBundle;
import com.oryx.core.bundle.common.InformationConstantBundle;
import com.oryx.core.bundle.helper.IMessageHelper;
import com.oryx.core.bundle.tools.BundleExtractor;
import com.oryx.core.layout.component.form.AutoGeneratedWindow;
import com.oryx.remote.webservice.element.model.XmlAbstractEntity;
import com.vaadin.data.util.BeanItemContainer;
import com.vaadin.event.ItemClickEvent;
import com.vaadin.event.SelectionEvent;
import com.vaadin.ui.Grid;
import com.vaadin.ui.Notification;
import com.vaadin.ui.UI;
import com.vaadin.ui.themes.ValoTheme;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

/**
 * Created by smbarki on 18/09/2017.
 */
public class BeanGrid<B> extends Grid {
    private Class<? extends IBundle> constantBundle;
    private BeanItemContainer<B> beanContainer;

    public BeanGrid(B bean, BeanItemContainer<B> beanContainer, Class<? extends IBundle> bundle) {
        super();
        this.addStyleName(ValoTheme.TABLE_SMALL);
        this.addStyleName(ValoTheme.TABLE_COMPACT);
        //this.setEditorEnabled(true);
        this.setSizeFull();
        this.setImmediate(true);

        this.beanContainer = beanContainer;

        this.addSelectionListener(new SelectionEvent.SelectionListener() {
            @Override
            public void select(SelectionEvent selectionEvent) {
                //selectionEvent.getSelected();
            }
        });

        this.addItemClickListener(new ItemClickEvent.ItemClickListener() {
            @Override
            public void itemClick(ItemClickEvent itemClickEvent) {
                if (itemClickEvent.isDoubleClick() && ((String) itemClickEvent.getPropertyId()).endsWith("Id")) {
                    String methodGet = "get" + ((String) itemClickEvent.getPropertyId()).replace("Id", "").substring(0, 1).toUpperCase() + ((String) itemClickEvent.getPropertyId()).replace("Id", "").substring(1);
                    try {
                        Method method = itemClickEvent.getItemId().getClass().getDeclaredMethod(methodGet);
                        if (method != null) {
                            Object object = method.invoke(itemClickEvent.getItemId());
                            if (object != null) {
                                AutoGeneratedWindow w = new AutoGeneratedWindow((XmlAbstractEntity) object);
                                UI.getCurrent().addWindow(w);
                            } else {
                                Notification.show(IMessageHelper.getDefaultString(InformationConstantBundle.class, "NoObjectToBeProcessed"));
                            }
                        }
                    } catch (NoSuchMethodException e) {
                        e.printStackTrace();
                    } catch (IllegalAccessException e) {
                        e.printStackTrace();
                    } catch (InvocationTargetException e) {
                        e.printStackTrace();
                    }

                } else {
                    ((Grid) itemClickEvent.getComponent()).setCellDescriptionGenerator(null);
                }
            }
        });
    }

    private void aplyColumnHeaderTranslation(Class<? extends IBundle> bundle) {
        if (bundle != null) {
            for (Grid.Column col : this.getColumns()) {
                col.setHeaderCaption(BundleExtractor.getStringValue(bundle, (String) col.getPropertyId()));
            }
        }
    }

    @Override
    public void setColumns(Object... propertyIds) {
        super.setColumns(propertyIds);

        //Set column header translations
        aplyColumnHeaderTranslation(this.constantBundle);
    }
}
